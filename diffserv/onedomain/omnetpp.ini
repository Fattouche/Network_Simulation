[General]
network = DiffservNetwork
#cmdenv-express-mode = false

sim-time-limit = 1250s
**.result-recording-modes =
**.scalar-recording = false
debug-statistics-recording = true

# default queues
**.queue.typename = "DropTailQueue"

[Config Apps]
**.H{1..8}.numApps = 2 # 0 = voice, 1 = video

# voice streaming
**.H{1..4}.app[0].typename = "UdpBasicBurst"
**.H1.app[0].destAddresses = "H5"
**.H2.app[0].destAddresses = "H6"
**.H3.app[0].destAddresses = "H7"
**.H4.app[0].destAddresses = "H8"
**.H{1..4}.app[0].chooseDestAddrMode = "once"
**.H{1..4}.app[0].destPort = 2000
**.H{1..4}.app[0].startTime = uniform(1s,2s)
**.H{1..4}.app[0].stopTime = 1200s
**.H{1..4}.app[0].messageLength = 172B # 160B voice + 12B Rtp header
**.H{1..4}.app[0].burstDuration = exponential(0.352s)
**.H{1..4}.app[0].sleepDuration = exponential(0.650s)
**.H{1..4}.app[0].sendInterval = 20ms

**.H{5..8}.app[0].typename = "UdpBasicBurst"
**.H{5..8}.app[0].localPort = 2000
**.H{5..8}.app[0].delayLimit = 0ms

**.H{5..8}.app[0].destAddresses = ""
**.H{5..8}.app[0].chooseDestAddrMode = "once"
**.H{5..8}.app[0].destPort = 0
**.H{5..8}.app[0].messageLength = 0B
**.H{5..8}.app[0].burstDuration = 0s
**.H{5..8}.app[0].sleepDuration = 0s
**.H{5..8}.app[0].sendInterval = 0ms

# video streaming
**.H{1..4}.app[1].typename = "UdpBasicApp"
**.H{1..4}.app[1].destPort = 1000
**.H{1..4}.app[1].startTime = uniform(1s,2s)
**.H{1..4}.app[1].stopTime = 1200s
**.H{1..4}.app[1].sendInterval = 40ms
**.H{1..4}.app[1].messageLength = 500B
**.H1.app[1].destAddresses = "H5"
**.H2.app[1].destAddresses = "H6"
**.H3.app[1].destAddresses = "H7"
**.H4.app[1].destAddresses = "H8"

**.H{5..8}.app[1].typename = "UdpSink"
**.H{5..8}.app[1].localPort = 1000

#
# Experiment 1
#
[Config Exp1]
**.edgeDatarate = 500kbps
**.coreDatarate = 500kbps

**.R?.eth[*].ingressTC.typename = "TC"
**.ingressTC.numClasses = 4
**.ingressTC.classifier.filters = xmldoc("filters.xml", "//experiment[@id='default']")
**.ingressTC.marker.dscps = "EF AF11 AF21 AF31 AF41 BE"
**.R?.ppp[*].queue.wrr.weights = "10 9 8 7 0"

# statistics
**.H{1..4}.app[*].sentPk.result-recording-modes = count
**.H{5..8}.app[*].rcvdPk.result-recording-modes = count
**.H{5..8}.app[*].endToEndDelay.result-recording-modes = vector # for computing median
**.R2.ppp[2].**Queue.rcvdPk.result-recording-modes = count
**.R2.ppp[2].**Queue.dropPk.result-recording-modes = count
**.R2.ppp[2].**Queue.queueLength.result-recording-modes = timeavg
**.R2.ppp[2].**Queue.queueingTime.result-recording-modes = vector # for computing median
**.app[*].sentPk*.scalar-recording = true
**.app[*].rcvdPk*.scalar-recording = true
**.app[*].endToEndDelay*.scalar-recording = true
**.R2.ppp[2].**Queue.*.scalar-recording = true

**.R{2..3}.**.queue.typename = "NetworkSimulatorQueue" 

#All at different thresholds
[Config Exp11]
extends = Apps, Exp1
<<<<<<< HEAD
**.R{2..3}.**.efQueue.red.minths="60"
**.R{2..3}.**.af1xQueue.red.minths="50"
**.R{2..3}.**.af2xQueue.red.minths="40"
**.R{2..3}.**.af3xQueue.red.minths="30"
**.R{2..3}.**.af4xQueue.red.minths="20"
=======
**.R?.**.red.minths = "60 30 10"
**.R?.**.red.maxths = "100 70 40"
**.R?.**.red.maxps = "0.40 0.70 1.00"
>>>>>>> Update experiments

#No RED
[Config Exp12]
extends = Apps, Exp1
<<<<<<< HEAD
**.R{2..3}.**.queue.typename = "FifoQueue"
=======
**.{R2,R3}.**.queue.typename = "FifoQueue" 
>>>>>>> Update experiments

#All same threshold of green
[Config Exp13]
extends = Apps, Exp1
<<<<<<< HEAD
**.R{2..3}.**.efQueue.red.minths="60"
**.R{2..3}.**.af1xQueue.red.minths="60"
**.R{2..3}.**.af2xQueue.red.minths="60"
**.R{2..3}.**.af3xQueue.red.minths="60"
**.R{2..3}.**.af4xQueue.red.minths="60"
=======
**.R?.**.red.minths = "60 60 60"
**.R?.**.red.maxths = "100 100 100"
**.R?.**.red.maxps = "0.4 0.4 0.4"

#All same threshold of red
[Config Exp14]
extends = Apps, Exp1
**.R?.**.red.minths = "10 10 10"
**.R?.**.red.maxths = "40 40 40"
**.R?.**.red.maxps = "1.00 1.00 1.00"
>>>>>>> Update experiments








