[General]
network = DiffservNetwork
sim-time-limit = 1250s
#cmdenv-express-mode = false

**.result-recording-modes =
**.scalar-recording = false
debug-statistics-recording = true

# default queues
**.queue.typename = "EtherQosQueue"
**.queue.dataQueue.typename = "DropTailQueue"
**.queue.frameCapacity = 100
**.queue.dataQueue.frameCapacity = 100

[Config Apps]
**.H{1..8}.numApps = 2 # 0 = voice, 1 = video

# voice streaming
**.H{1..4}.app[0].typename = "UdpBasicBurst"
**.H1.app[0].destAddresses = "H5"
**.H2.app[0].destAddresses = "H6"
**.H3.app[0].destAddresses = "H7"
**.H4.app[0].destAddresses = "H8"
**.H{1..4}.app[0].chooseDestAddrMode = "once"
**.H{1..4}.app[0].destPort = 2000
**.H{1..4}.app[0].startTime = uniform(1s,2s)
**.H{1..4}.app[0].stopTime = 1200s
**.H{1..4}.app[0].messageLength = 172B # 160B voice + 12B Rtp header
**.H{1..4}.app[0].burstDuration = exponential(0.352s)
**.H{1..4}.app[0].sleepDuration = exponential(0.650s)
**.H{1..4}.app[0].sendInterval = 20ms

**.H{5..8}.app[0].typename = "UdpBasicBurst"
**.H{5..8}.app[0].localPort = 2000
**.H{5..8}.app[0].delayLimit = 0ms

**.H{5..8}.app[0].destAddresses = ""
**.H{5..8}.app[0].chooseDestAddrMode = "once"
**.H{5..8}.app[0].destPort = 0
**.H{5..8}.app[0].messageLength = 0B
**.H{5..8}.app[0].burstDuration = 0s
**.H{5..8}.app[0].sleepDuration = 0s
**.H{5..8}.app[0].sendInterval = 0ms

# video streaming
**.H{1..4}.app[1].typename = "UdpBasicApp"
**.H{1..4}.app[1].destPort = 1000
**.H{1..4}.app[1].startTime = uniform(1s,2s)
**.H{1..4}.app[1].stopTime = 1200s
**.H{1..4}.app[1].sendInterval = 40ms
**.H{1..4}.app[1].messageLength = 500B
**.H1.app[1].destAddresses = "H5"
**.H2.app[1].destAddresses = "H6"
**.H3.app[1].destAddresses = "H7"
**.H4.app[1].destAddresses = "H8"

**.H{5..8}.app[1].typename = "UdpSink"
**.H{5..8}.app[1].localPort = 1000

#
# Experiment 1
#

[Config Exp1]
**.edgeDatarate = 500kbps
**.coreDatarate = 500kbps

**.R?.eth[*].ingressTC.typename = "TC"
**.ingressTC.numClasses = 4
**.ingressTC.classifier.filters = xmldoc("filters.xml", "//experiment[@id='default']")
**.ingressTC.marker.dscps = "EF AF11 AF21 AF31 AF41 BE"

**.R?.ppp[*].queue.typename = "DropTailQueue"

# statistics
**.H{1..4}.app[*].packetSent.result-recording-modes = count
**.H{1..4}.app[*].packetSent*.scalar-recording = true
**.H{5..8}.app[*].packetReceived.result-recording-modes = count
**.H{5..8}.app[*].packetReceived*.scalar-recording = true
**.H{5..8}.app[*].endToEndDelay.result-recording-modes = vector 
**.app[*].endToEndDelay*.scalar-recording = true

**.R?.ppp[*].**.queueingTime.result-recording-modes = default
**.R?.ppp[*].**.packetDropCongestion.result-recording-modes = default
**.R?.**.queue.**.pkClass.result-recording-modes = default

[Config NoWredNoCongestion]
extends = Apps, Exp1
**.H{1..4}.app[*].sendInterval = 100ms

[Config NoWredWithCongestion]
extends = Apps, Exp1

[Config NoWredLotsCongestion]
extends = Apps, Exp1
**.H{1..4}.app[*].sendInterval = 10ms

[Config R2DefaultWred]
extends = Apps, Exp1
**.R2.ppp[*].queue.typename = "NetworkSimulatorQueue"
**.R2.ppp[*].queue.wrr.weights = "10 9 8 7 0"

[Config AllRoutersDefaultWred]
extends = Apps, Exp1
**.R?.ppp[*].queue.typename = "NetworkSimulatorQueue"
**.R?.ppp[*].queue.wrr.weights = "10 9 8 7 0"

[Config R2DefaultWredEvenWrr]
extends = Apps, Exp1
**.R2.ppp[*].queue.typename = "NetworkSimulatorQueue"
**.R2.ppp[*].queue.wrr.weights = "1 1 1 1 1"

[Config R2DefaultWredSingleClass]
extends = Apps, Exp1
**.R2.ppp[*].queue.typename = "NetworkSimulatorQueue"
**.R2.ppp[*].queue.wrr.weights = "1 1 1 1 1"
**.ingressTC.classifier.filters = xmldoc("all_af1.xml", "//experiment[@id='default']")

[Config R2DefaultWredSingleClassMin50]
extends = R2DefaultWredSingleClass
**.R?.**.red.minths = "50"

[Config R2DefaultWredSingleClassMin10]
extends = R2DefaultWredSingleClass
**.R?.**.red.minths = "10"

[Config R2DefaultWredSingleClassMin20]
extends = R2DefaultWredSingleClass
**.R?.**.red.minths = "20"